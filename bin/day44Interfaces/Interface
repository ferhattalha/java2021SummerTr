
INTERFACE.....

1. INTERFACE ASLA BÝR CLASS DEGÝLDÝR. INTERFACE INTERFACE'dir.
   Ýnterface yapýlarda concrate method asla creat edilemez. Sadece abstract methodlar creat edilir.

2. Java multiple inheritance desteklemez. Ancak interface parentler multiple  inheritance destekler.

3. Birden fazla parent class'larda ayný isimli methodlarýn olmasý durumunda child class ayný isimli 
   farklý body'li methodlar için seçim yapamaz.Fakat interface'lerde methodlarýn bodyleri olmadýgý için
   ayný isimli methodlar birbiri ile tamamen ayný oldugu için secim  söz konusu olmaz. Child class parent 
   interface'den ayný isimli methodlardan birini override ederek bu sorun çözülür.
   
   Ahan da trick : Parent interface'lerde ayný isimli fakat farklý return type'lý methodlar child class
   ta RTE verir.  

4.  Interface yapýlarda tüm methodlar abstract olmak zorunda oldugundan method signiture "abstract" 
    keyword'u yazýlmayabilir.
    public abstract void koltuk(); // abstract method keyword kullanýlmýþ
	public void ayna();  // abstract method keyword kullanýlmamýþ
	 
5.  ýnterface'lerdeki tüm member'lar public oldugu icin AccesModifier yazýlmasa da ayný iþlemi yapar
    abstract void koltuk(); // access midifier silinmiþ  ayný iþlemi yapar
	public void ayna();  //    access midifier silinmemiþ ayný iþlemi yapar
	
	Trick : Normal class'larda AccMod yazýlmazsa default olur.Ancak Interface'lerde AccMod yazýlmazsa public olur.
	
6.  interface'ler kendi arasýnda parent child iliskisi kurabilir
    interface'leri bir class'a parent yapmak için "implement" keyword kullanýlýr
    Class'larý bir class'a parent yapmak için "extends" keywordu kullanýlýr
    
    class--->class   : extends
    interface--->interface : extends
    class---->interface : implements
    interface----> class : O..LA..MAZZZ..ýnterface'in parent'i class olmaz
    
7.  Ýnterface'lerde variable'lar mutlaka final'dir.
    a) Final variable'ler italik bold'dur ve büyük harf ile yazýlmalý
    b) Final variable 'ler initialize elidilmezse CTE verir.

8.  Interface'lerde variable'lar mutlaka static'dir. Dolayýsýyla obj creat etmeden interface ismi ile ulaþýlabilir.

9.  ****Interface'lerde tüm member'lar 
    Dolayýsýyla tüm interface variable'ler        
    
10. Interface yapýlarda istenirse asbstract olmayan concrate method creat edilebilir. 
    a. AccMo'dan sonra "default" veya "statik" kullanýlmalý.
    b. Interface yapýlarda concrate method için kullanýlan "default" keyword'u kesinlikle asla AccMod türünü vermez..(ÖNEMLÝ)
    c. Interface yapýlarda concrate method child class tarafýndan override edilmek zorunda degildir.
    d. Interface yapýlarda default olarak creat edilen concrate method child class'a ancak obje ile call edilir.
    e. Interface yapýlarda static olarak creat edilen concrate method child class'a ancak Datatype (interface name)  ile call edilir.
    
    
    
    
    INTERFACE....
            INTERFACE ASLA BÝR CLASS DEGÝLDÝR. INTERFACE INTERFACE'dir.
            
1) Interface yapilarda concrete method asla creat! edilemez. sadece  abstract method'lar creat edilir.
2) Java multiple inheritance desteklemez . Ancak interface parent'ler multiple inheritance'i destekler
3)Birden fazla parent class'larda ayni isimli methodlarin olmasi durumunda child class ayni isimli 
  farkli bodyli methodlar icin seçim yapamaz. fakat Ýnterface'lerde methodlarin bodyleri olmadigindan 
  ayni isimli methodlar birbiriyle tamamen ayni oldugu icin secim soz konusu olmaz ve child class parent 
  inteface'den  ayni isimli methodlardan birini override ederek bu sorun  cozulur
  Ahan da trick : Parent ýnterface'lerde ayni isimli fakat farkli return type'li methodlar child class'ta CTE verir.
4) Interface yapilarda tum methodlar abstract olmak zorunda oldugundan method signiture "abstract"
   keywordu yazilmayabilir.
 
 
    public abstract void koltuk();-->abstract method abstract keyword kullanilmis
    public void ayna();           -->abstract method abstract keyword kullanilmamis
 
5) Interface'lerdeki tum member'lar public oldugu icin  AccesModifier  yazilmasa da public ile ayni islemi yapar.
   public void ayna(); <-->  void ayna();  ---> ayni islemi yaparlar.
 
  Trick :  normal class'larda AccMod yazilmazsa default olur.Ancak Interface'lerde AccMod yazilmazsa public olur
 
6) Interface'ler kendi arasinda parent child (extends) iliskisi kurabilir.
   Interface'leri bir class'a parent yapmak icin "implements" keywordu kullanilir. 
   Class'lari bir class'a parent yapmak icin "extends" keywordu kullanilir. 
 
  class --> class  : extends
  interface --> interface  : extends
  class --> interface  : implements
  interface --> class  :O-LA-MAZZZ.. interface'in parent'i class olamaz..
 
 7)Interface'lerde tum veriable'lar mutlaka final'dir.
    a)Final veriable'ler italik bold'dur ve buyuk harf ile yazilmali
    public static final String kumas="kadife"; <--> String kumas="kadife";
    
    b)Final veriable'ler initialize edilmezse CTE verir.
 8)Interface'lerde veriable'lar mutlaka static'dir. Dolayisiyle obj creat etmeden interface ismi ile ulasilabilir.
 
 9)*****Interface'lerde tum member'lar public'tir.
 Dolayisiyle tum interface veriable'leri -->public+static+final (yazsa da yazmasa da )
 
 HANÝMÝS TRÝCK :
 Ayni isimli ve ayni data type'li variable'lar parent interface'lerde creat edip  object kullanarak call edilirse
 Java hangisini sececegine karar veremez ve CTE verir. CTE almamak icin ayni isimli variable'lar kesinlikle "interface"
  isimleri kullanarak call edilmelidir.
        
        System.out.println(S1.RENK);-->CTE verir
        
10)Interface yapilarda istenirse abstract olmayan concrete method creat edilebilir.
  a) AccMod'den sonra "default" veya "static" keyword kullanilmali.
  b)Interface yapilarda concrete method icin kullanilan "default"
    keyword'u kesinlikle asla AccMod turunu vermez .
  c)Interface yapilarda concrete method child class tarafindan override edilmek zorunda degildir.   
  d)Interface yapilarda "default" olarak creat edilen concrete method child class'a ancak obj ile call edilir.
  e)Interface yapilarda "static" olarak creat edilen concrete method child class'a ancak Datatype(interface name) ile  call edilir.
    